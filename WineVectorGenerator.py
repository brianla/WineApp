"""Module for converting wine tags into a wine vector
"""

from Globals import *
from Classes import *
from UserModelAccess import *
from InventoryModelAccess import *
from RecommenderModelAccess import *
from math import pow

def calcAverageVector(defineList):
  """Calculate an average vector from a list of Defining tag vectors

  Args:
    defineList: list of tag vectors

  Return:
    list: list of aroma floats
  """
  aromaFloats = []

  for aroma in range(BITTER, EFFECT):
    floatsum = 0.0
    count = 0

    for tagVector in defineList:
      if tagVector[aroma] != None:
        floatsum += tagVector[aroma]
        count += 1

    if count == 0:
      aromaFloats.append(None)
    else:
      aromaFloats.append(floatsum / count)

  return aromaFloats


def calcDecayedSumVector(nonDefineList):
  """Calculate a decayed sum vector from a list of Non-Defining tag vectors

  Args:
    nonDefineList: list of tag vectors

  Return:
    list: list of aroma floats
  """
  aromaFloats = []

  for aroma in range(BITTER, EFFECT):
    floatsum = 0.0
    count = 0

    for tagVector in nonDefineList:
      if tagVector[aroma] != None:
        floatsum += tagVector[aroma]
        count += 1

    if count == 0:
      aromaFloats.append(None)
    else:
      aromaFloats.append(pow(DECAY_LAMBDA, count) * floatsum)

  return aromaFloats


def calcMergedVector(averageVector, decayedSumVector):
  """Calculate a merged vector from the average and decayed sum vectors.

  Args:
    averageVector: average vector from Defining tags
    decayedSumVector: decayed sum vector from Non-Defining tags

  Return:
    list: list of floats
  """
  mergedList = []

  for i in range(len(averageVector)):
    if averageVector[i] == None and decayedSumVector[i] == None:
      mergedList.append(0.0)

    elif averageVector[i] == None and decayedSumVector[i] != None:
      mergedList.append(decayedSumVector[i])

    elif averageVector[i] != None and decayedSumVector[i] == None:
      mergedList.append(averageVector[i])

    else:
      mergedList.append((averageVector[i] + decayedSumVector[i]) / 2.0)

  return mergedList


def balanceWine(mergedVector):
  """20% reduction to difference from average
  
  Arg:
    mergedVector: Vector of floats

  Return:
    modified mergedVector
  """
  # Get average across all attributes of mergedVector
  avg = 0.0
  count = 0
  for aroma in mergedVector:
    if aroma != None:
      avg += aroma
      count += 1
  avg /= count

  index = 0

  # Balance each float
  for aroma in mergedVector:
    if aroma != None and aroma > 0.0:
      mergedVector[index] = aroma + 0.2 * (avg - aroma)
    index += 1

  return mergedVector


def raiseWine(mergedVector):
  """20% of average boost to aroma floats.
  
  Arg:
    mergedVector: Vector of floats

  Return:
    modified mergedVector
  """
  avg = 0.0
  count = 0
  for aroma in mergedVector:
    if aroma != None:
      avg += aroma
      count += 1
  avg /= count

  index = 0

  for aroma in mergedVector:
    if aroma != None and aroma > 0.0:
      mergedVector[index] = aroma + 0.2 * avg
    index += 1

  return mergedVector


def lowerWine(mergedVector):
  """20% of average reduction for values > that value
  else a 50% reduction is applied directly
  
  Arg:
    mergedVector: Vector of floats

  Return:
    modified mergedVector
  """
  avg = 0.0
  count = 0
  for aroma in mergedVector:
    if aroma != None:
      avg += aroma
      count += 1
  avg /= count

  index = 0

  for aroma in mergedVector:
    if aroma != None:
      if aroma > 0.2 * avg:
        mergedVector[index] = aroma - 0.2 * avg
      else:
        mergedVector[index] = aroma * 0.5
    index += 1

  return mergedVector


def filterVector(mergedVector, effects):
  """Filter mergedVector with each effect in effects.

  Args:
    mergedVector: merged vector of floats
    effects: list of strings detailing effects to implement

  Return:
    list: list of floats generated by applying effects on mergedVector
  """
  for effect in effects:
    if effect == "lower":
      mergedVector = lowerWine(mergedVector)

    if effect == "raise":
      mergedVector = raiseWine(mergedVector)

    if effect == "balance":
      mergedVector = balanceWine(mergedVector)

  return mergedVector


def normalizeVector(mergedVector):
  """Normalize mergedVector with respect to max feature vector.

  Max feature vector represents maximums in each float field.
  First, divide the floats in mergedVector by the corresponding float in feature vector.
  Then boost the 4 taste attributes by 120%
  
  Arg:
    mergedVector: Vector of floats

  Return:
    Modified mergedVector
  """
  featureVector = dbGetFeatureVector()[0]
  featureFloats = [featureVector['bitter'],
                   featureVector['sweet'],
                   featureVector['sour'],
                   featureVector['salty'],
                   featureVector['chemical'],
                   featureVector['pungent'],
                   featureVector['oxidized'],
                   featureVector['microbiological'],
                   featureVector['floral'],
                   featureVector['spicy'],
                   featureVector['fruity'],
                   featureVector['vegetative'],
                   featureVector['nutty'],
                   featureVector['caramelized'],
                   featureVector['woody'],
                   featureVector['earthy']]

  index = -1

  for aroma in mergedVector:
    index = index + 1
    if featureFloats[index] == None:
      continue

    mergedVector[index] = aroma / featureFloats[index]

  for i in range(4):
    mergedVector[i] = mergedVector[i] * 1.2

  return mergedVector


def convertTagsToVector(tags):
  """Convert a string of tags into a wine vector.

  Use the TagConversionMatrix to retrieve properties associated with each tag and combine them
  into a wine vector representing a new wine.

  Args:
    string tags: A string of comma separated tags associated with the new wine.
                 eg. "terra,toast,vanilla"

  Return:
    list: A list populated with the 16 float values.
  """
  tagsList = tags.split(',')

  # Create list for Defining tags, list for Non-Defining tags, and list for effects in tagsList
  defineList = []
  nonDefineList = []
  effects = []

  # Place tag vectors in lists
  for i in range(0, len(tagsList)):
    tagsList[i] = tagsList[i].strip()
    try:
      tagVector = TAG_CONVERSION_MATRIX[tagsList[i]]
    except KeyError:
      continue

    # Place tagVector in appropriate list
    if tagVector[DEFINING] != None:
      defineList.append(tagVector)

      if tagVector[EFFECT] != None:
        effects.append(tagVector[EFFECT])

    else:
      nonDefineList.append(tagVector)

  # Aggregate Defining vectors and Non-Defining vectors
  averageVector = calcAverageVector(defineList)
  decayedSumVector = calcDecayedSumVector(nonDefineList)
  mergedVector = calcMergedVector(averageVector, decayedSumVector)

  # Finalize results
  mergedVector = filterVector(mergedVector, effects)
  mergedVector = normalizeVector(mergedVector)

  return mergedVector


